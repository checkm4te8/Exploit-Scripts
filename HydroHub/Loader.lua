shared.Notification = loadstring(game:HttpGet(
        "https://raw.githubusercontent.com/MegamiShin/UI-Librarys/main/Notifications.lua"
        , true))()

if shared.HydroExecuted == true then
    return shared.Notification.new("error", "Duplicate execution",
            "Hydro is already running, you cannot reexecute it.", true, 5)
end

----- ENSURE SCRIPT ISN'T MULTI EXECUTED -----
shared.HydroExecuted = true


local isSW = false
local IsKRNL = false
local IsFluxus = false

if getexecutorname and type(getexecutorname) == "function" then
    executorName = getexecutorname() -- string response, use eq statement
    if executorName == "ScriptWare" then
        isSW = true
    elseif executorName == "Fluxus" then
        IsFluxus = true
     end
end

if Krnl then
    IsKRNL = true
end

if not syn and not isSW and not IsKRNL and not IsFluxus then
    shared.Notification.new("warning", "Experimental support - unsupported executor",
        "If you encounter issues, discontinue use and ask for your executor to be added.", true, 5)
end

local EnvNotif = shared.Notification.new("info", "Environment",
        "Creating a secure environment for Hydro hub and preloading assets...")

----- PRELOAD VARIABLES -----

----- SERVICES -----
shared.Players = game:GetService("Players")
shared.TeleportService = game:GetService("TeleportService")
shared.StarterGui = game:GetService("StarterGui")
shared.ReplicatedStorage = game:GetService("ReplicatedStorage")
shared.Lighting = game:GetService("Lighting")
shared.workspace = game:GetService("Workspace")
shared.UserInputService = game:GetService("UserInputService")
shared.HttpService = game:GetService("HttpService")
shared.RunService = game:GetService("RunService")
shared.NetworkClient = game:GetService("NetworkClient")

----- LOADSTRINGS -----
local FluxLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/MegamiShin/UI-Librarys/main/fluxlib.txt", true))()
local PromptLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/MegamiShin/UI-Librarys/main/PromptGui.lua",
        true))()
shared.DendroESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/LordNahida/DendroESP/main/Source.lua"))();

----- OBJECTS -----
local LocalPlayer = shared.Players.LocalPlayer

----- VALUES -----
local PORT = 5000
local InitialSetup = true
local WSURL = "wss://Hydro-Backend.megamitensei.repl.co/"
local ChatShowUsername = false
local Username = LocalPlayer.Name
local UninitializedSettings = {}
local DisplayName = LocalPlayer.DisplayName
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' -- SW devs fixed their shit but some executors still need it for B64 decoding

----- FUNCTIONS -----
shared.websocketfunc = syn and syn.websocket.connect or IsKRNL and Krnl.WebSocket.connect or IsFluxus and WebSocket.connect or WebSocket and WebSocket
    .connect
    or websocket and websocket.connect

shared.requestfunc = syn and syn.request or isSW and request or IsKRNL and request or IsFluxus and request or request and request

shared.queuetpfunc = syn and syn.queue_on_teleport or isSW and queue_on_teleport or IsKRNL and queue_on_teleport or IsFluxus and queue_on_teleport or queue_on_teleport and queue_on_teleport

function GetFingerprint()
    local Request = shared.requestfunc({ Url = 'https://httpbin.org/get', Method = 'GET' })
    local DecodedBody = shared.HttpService:JSONDecode(Request.Body)
    if syn then
    return DecodedBody.headers["Syn-User-Identifier"]
    elseif isSW then
    return DecodedBody.headers["Sw-User-Identifier"]
	elseif IsKRNL then
	return DecodedBody.headers["Krnl-Fingerprint"]
    elseif IsFluxus then
    return DecodedBody.headers["Flux-Fingerprint"]
    end
end

shared.b64decplaceholder = function(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
            return string.char(c)
    end))
end

shared.basedecodefunc = syn and syn.crypt.base64.decode or isSW and crypt.base64decode or IsKRNL and shared.b64decplaceholder or IsFluxus and shared.b64decplaceholder or shared.b64decplaceholder and shared.b64decplaceholder


-----END VARIABLE PRELOADING -----

wait(1.5)
EnvNotif:delete()

----- EXECUTOR DOES NOT SUPPORT WEBSOCKETS -----
if not shared.websocketfunc then
    shared.Notification.new("error", "Critical compatibility issue",
        "Your executor does not support websocket connections. Script failed, rejoining...")
    wait(5)
    shared.TeleportService:Teleport(game.PlaceId, LocalPlayer)
    return
else
    ----- END EXECUTOR DOES NOT SUPPORT WEBSOCKETS -----


    ----- CONNECT TO WEBSOCKET -----
    local WsConnNotif = shared.Notification.new("info", "Websocket",
            "Connecting to the websocket to retrieve data, please wait, this may take a bit...")

    shared.WebSocket = shared.websocketfunc(WSURL .. PORT)

    if shared.WebSocket then
        WsConnNotif:delete()
        local kickForWsClose = true
        local initialDisconnectListener = shared.WebSocket.OnClose:Connect(function()
            if kickForWsClose == true then
            LocalPlayer:Kick("[HYDRO] The websocket connection has been closed before script initialization, likely due to rate limits. Please try again.")
            end
        end)
        
        ----- SEND HELLO MESSAGE TO WEBSOCKET -----
        shared.WebSocket:Send(Username)

        local WsOKNotif = shared.Notification.new("success", "Websocket", "Connection established, preparing...")

        ----- END CONNECT TO WEBSOCKET -----

        ----- CHECK IF FIRST TIME AND CREATE FILES/FOLDERS -----
        shared.WhereToReadFrom = nil
        if isfolder("HydroHub") and (isfile("HydroHub/Settings.cfg") or isfile("HydroHub/Cloud.cfg")) then
            if isfile("HydroHub/Settings.cfg") and isfile("HydroHub/Cloud.cfg") then
                delfolder("HydroHub")
                LocalPlayer:Kick(
                    "[HYDRO] A critical error has occured and has been rectified by deleting all your saved data.")
                end
            if isfile("HydroHub/Settings.cfg") then
                shared.WhereToReadFrom = "Local"
            elseif isfile("HydroHub/Cloud.cfg") then
                shared.WhereToReadFrom = "Cloud"
            else
                delfolder("HydroHub")
                LocalPlayer:Kick(
                    "[HYDRO] A critical error has occured and has been rectified by deleting all your saved data.")
            end
            InitialSetup = false
        end

        wait(1)
        WsOKNotif:delete()

        local ClearToProceed = false

        if InitialSetup == true then
            if isfolder("HydroHub") then
                delfolder("HydroHub")
            end

            local PromptNotif = shared.Notification.new("info", "First time use",
                    "First time use detected, please select saving method on the prompt.")
            ----- END CHECK IF FIRST TIME AND CREATE FILES/FOLDERS -----

            ----- SAVING PROMPT -----
            local Debounce = false

            PromptLib:New({
                Title = "Cloud setting saving",
                Footer = "Some identifying information will be sent to the server (such as your HWID), your IP address will NOT be transmitted.",
                Text = "HydroHub cloud saving",
                Icon = "http://www.roblox.com/thumbs/asset.ashx?assetid=4458806382&x=100&y=100&format=png",
                ----- ENABLE CLOUD SAVING -----

                Yes = function()
                    if Debounce == false then
                        Debounce = true
                        PromptNotif:delete()

                        ----- CHECK ACCOUNT EXISTANCE -----
                        local FetchingTemplateNotif = shared.Notification.new("info", "Checking for saves",
                                "Checking if you have saved data...")

                        local createNewAccount = nil
                        local Fingerprint = GetFingerprint()
                        local OnCloudSaveStatusMessage = shared.WebSocket.OnMessage:Connect(function(msg)
                                local funpar, data = msg:match("^([^,]+),(.*)$")
                                if funpar == "CLOUDSAVECHECK" then
                                    if data == " true" then
                                        createNewAccount = false
                                    else
                                        createNewAccount = true
                                    end
                                    OnCloudSaveStatusMessage:Disconnect()
                                end
                        end)
                        
                        shared.WebSocket:Send("GETDATA, CHECKFORCLOUDSAVE, "..Fingerprint)
                        
                        while (createNewAccount == nil) do
                            wait(0.5)
                        end

                        ----- END CHECK ACCOUNT EXISTANCE -----


                        FetchingTemplateNotif:delete()

                        if createNewAccount == true then
                            ----- CREATE NEW ACCOUNT -----
                            local NewAccNotif = shared.Notification.new("warning", "Creating account",
                                    "Creating your account using your fingerprint...")

                            local Fingerprint = GetFingerprint()

                            local registerComplete = false
                            local OnRegisterMessage = shared.WebSocket.OnMessage:Connect(function(msg)
                                    local funpar, data = msg:match("^([^,]+),(.*)$")
                                    if funpar == "REGISTERCOMPLETE" then
                                        registerComplete = true
                                        OnRegisterMessage:Disconnect()
                                    elseif msg == "BADHWID" then
                                        LocalPlayer:Kick("[HYDRO] The websocket server has refused account creation. This is likely due to you using an unsupported executor, we try to support most executors, let us know to add support for yours!")
                                    end
                                end)

                            shared.WebSocket:Send("SETDATA, REGISTERDATA, " .. Fingerprint)

                            while (registerComplete == false) do
                                wait(0.5)
                            end

                            if isfolder("HydroHub") then
                                delfolder("HydroHub")
                            end
                            makefolder("HydroHub")
                            writefile("HydroHub/Cloud.cfg",
                                "READING FROM CLOUD. TO REVERT, DELETE THE PARENT FOLDER OF THIS FILE.")

                            NewAccNotif:delete()

                            local AccCreatedNotif = shared.Notification.new("success", "Registered",
                                    "Your account was registered! Continuing...", true, 3)

                            wait(1)
                            shared.WhereToReadFrom = "Cloud"
                            ClearToProceed = true;




                            ----- END CREATE NEW ACCOUNT -----
                        else
                            ----- LOGIN TO ACCOUNT -----
                            local LoggingNotif = shared.Notification.new("info", "Login",
                                    "Logging you in using your fingerprint...")

                            local Fingerprint = GetFingerprint()

                            local loginComplete = false

                            local onLoginMessage = shared.WebSocket.OnMessage:Connect(function(msg)
                                    local funpar, data = msg:match("^([^,]+),(.*)$")
                                    if funpar == "LOGINCOMPLETE" then
                                        loginComplete = true
                                        onLoginMessage:Disconnect()
                                    elseif msg == "LOGINFAIL" then
                                        delfolder("HydroHub")
                                        LocalPlayer:Kick("[HYDRO] An error occured when fetching your data, Hydro Hub will try to create new data upon reexecution of the script.")
                                        end
                                end)

                            shared.WebSocket:Send("GETDATA, LOGINDATA, " .. Fingerprint)

                            while (loginComplete == false) do
                                wait(0.5)
                            end

                            if isfolder("HydroHub") then
                                delfolder("HydroHub")
                            end
                            makefolder("HydroHub")
                            writefile("HydroHub/Cloud.cfg",
                                "READING FROM CLOUD. TO REVERT, DELETE THE PARENT FOLDER OF THIS FILE.")

                            wait(1)
                            LoggingNotif:delete()

                            ClearToProceed = true
                            shared.WhereToReadFrom = "Cloud"

                            ----- END LOGIN TO ACCOUNT -----
                        end
                    else
                        while ClearToProceed == false do
                            wait(1)
                        end
                    end
                end,
                ----- END ENABLE CLOUD SAVING -----

                -----ENABLE LOCAL SAVING -----
                Cancel = function()
                    if Debounce == false then
                        Debounce = true
                        PromptNotif:delete()
                        local FetchingTemplateNotif = shared.Notification.new("info", "Fetching template",
                                "Fetching the current settings template...")

                        local processedTemplate = nil
                        local undecodedTemplate = nil
                        local OnTemplateMessage = shared.WebSocket.OnMessage:Connect(function(msg)
                                local funpar, data = msg:match("^([^,]+),(.*)$")
                                if funpar == "SETTINGSTEMPLATE" then
                                    local jsondecoded = shared.HttpService:JSONDecode(data)
                                    processedTemplate = jsondecoded
                                    undecodedTemplate = data
                                    OnTemplateMessage:Disconnect()
                                end
                            end)

                        shared.WebSocket:Send("GETDATA, GETLOCALTEMPLATE")

                        while (processedTemplate == nil) do
                            wait(0.5)
                        end

                        FetchingTemplateNotif:delete()
                        local WritingSettings = shared.Notification.new("warning", "Writing settings",
                                "Writing settings, do not turn off power.")
                        makefolder("HydroHub")
                        writefile("HydroHub/Settings.cfg", undecodedTemplate)
                        shared.WhereToReadFrom = "Local"
                        ClearToProceed = true
                        WritingSettings:delete()
                    else
                        while ClearToProceed == false do
                            wait(1)
                        end
                    end
                end
            })
            -----END ENABLE LOCAL SAVING -----

            ----- END SAVING PROMPT -----
        else
            --ADD WHERETOPROCEED
            ClearToProceed = true
        end

        while (ClearToProceed == false) do
            wait(0.5)
        end

        ----- FIRST TIME CONFIGURATION DONE, BELOW = STANDARD LOADER -----

        local ReadingNotif = shared.Notification.new("info", "Reading configuration", "Reading your configuration...")
        shared.Settings = nil

        if shared.WhereToReadFrom == "Local" then
            shared.Settings = shared.HttpService:JSONDecode(readfile("HydroHub/Settings.cfg"))
        elseif shared.WhereToReadFrom == "Cloud" then
            local Fingerprint = GetFingerprint()
            local loginComplete = false

            local onLoginMessage = shared.WebSocket.OnMessage:Connect(function(msg)
                    local funpar, data = msg:match("^([^,]+),(.*)$")
                    if funpar == "LOGINCOMPLETE" then
                        local jsondecoded = shared.HttpService:JSONDecode(data)
                        shared.Settings = jsondecoded
                        loginComplete = true
                        onLoginMessage:Disconnect()
                            elseif msg == "LOGINFAIL" then
                                        delfolder("HydroHub")
                                        LocalPlayer:Kick("[HYDRO] The websocket server has reported your data does not exist. Please reexecute Hydro, it will try to create new data.")
                              
                    end
                end)

            shared.WebSocket:Send("GETDATA, LOGINDATA, " .. Fingerprint)

            while (loginComplete == false) do
                wait(0.5)
            end
        end
        wait(1)
        ReadingNotif:delete()
        local OKNotif = shared.Notification.new("success", "All set!", "Components are ready, initializing UI.", true, 3)

        ----- INTIALIZE UI -----
        local ColorR = shared.Settings.ColorR
        local ColorG = shared.Settings.ColorG
        local ColorB = shared.Settings.ColorB
        shared.CompleteColor = Color3.fromRGB(tonumber(ColorR), tonumber(ColorG), tonumber(ColorB))

        shared.Mainframe = FluxLib:Window("Hydro", "Welcome, " .. DisplayName .. "!",
                Color3.fromRGB(tonumber(ColorR), tonumber(ColorG), tonumber(ColorB)), Enum.KeyCode.End)

        -----GET UNIVERSAL SCRIPT -----

        local scriptEncoded = nil
        kickForWsClose = false
        initialDisconnectListener:Disconnect()
        local OnReceivedEncodedScript = shared.WebSocket.OnMessage:Connect(function(msg)
                local funpar, data = msg:match("^([^,]+),(.*)$")
                if funpar == "UNIVERSALSCRIPT" then
                    scriptEncoded = data
                    OnReceivedEncodedScript:Disconnect()
                end
            end)

        shared.WebSocket:Send("GETDATA, GETUNIVERSALSCRIPT")


        while (scriptEncoded == nil) do
            wait(0.5)
        end
                

        local decodedUniversal = shared.basedecodefunc(scriptEncoded)


        loadstring(decodedUniversal)()
        
    end
end
