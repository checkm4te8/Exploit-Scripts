----- INITIALIZE NOTIFICATIONS -----

----- NOTIFICATIONS HOLDER -----
loadstring(game:HttpGet(
        "https://raw.githubusercontent.com/checkm4te8/UI-Librarys/main/NotifHolder.lua"
        , true))()

----- NOTIFICATIONS LIBRARY -----
shared.Notification = loadstring(game:HttpGet(
        "https://raw.githubusercontent.com/checkm4te8/UI-Librarys/main/NotificationsUpdated.lua"
        , true))()

if shared.HydroExecuted == true then
    return shared.Notification:Notify(
        {Title = "Duplicate execution", Description = "Hydro is already running, you cannot reexecute it."},
        {OutlineColor = Color3.fromRGB(255, 84, 84),Time = 5, Type = "image"},
        {Image = "http://www.roblox.com/asset/?id=5107154082", ImageColor = Color3.fromRGB(255, 84, 84)})
end

----- ENSURE SCRIPT ISN'T MULTI EXECUTED -----
shared.HydroExecuted = true

if shared.TEPRedirected == true and not isfile("T3PHUB/AlreadyRedirected.cfg") then
    local requestfunc = syn and syn.request or isSW and request or IsKRNL and request or IsFluxus and request or request and request

    local queuetpfunc = syn and syn.queue_on_teleport or isSW and queue_on_teleport or IsKRNL and queue_on_teleport or IsFluxus and queue_on_teleport or queue_on_teleport and queue_on_teleport

    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local PlSer = game:GetService("Players")
    local LocalPlayer = PlSer.LocalPlayer

    if not requestfunc or not queuetpfunc then
       return LocalPlayer:Kick("T3PHUB has merged into Hydro Hub, with many improvements, unfortunately your executor is not supported. We sincerely apologize. Let us know in our Discord .gg/ympftAWXJC")
    end

    print("Hello there! You have attempted to execute T3PHUB.")
    print("T3PHUB does not exist anymore, and has instead merged into Hydro.")
    print("Hydro is made by the same people that made T3PHUB, but much better, with cloud saving, special game features and more")
    print("We are glad you are still using T3PHUB, but it is time for a change, don't you think?")
    if not isfolder("T3PHUB") then
        makefolder("T3PHUB")
    end

    if not isfile("T3PHUB/AlreadyRedirected.cfg") then
        writefile("T3PHUB/AlreadyRedirected.cfg", "OK")
    end

    print("In 40 seconds, you will be rejoined to the same server, and Hydro will be automatically loaded, if it is not, reexecute T3PHUB and Hydro will load. Additionally, in 30 seconds you will be prompted to join our Discord where you can learn more about Hydro!")
    print("You do not need to use a different loadstring for Hydro, your executor will remember that you were already told about the merge of Hydro and automatically run Hydro each time you execute T3PHUB, no need to change your loadstring!")


    shared.Notification:Notify(
        {Title = "T3PHUB has merged", Description = "T3PHUB has merged into Hydro, please press F9 and read for more information."},
        {OutlineColor = Color3.fromRGB(90, 180, 233),Time = 5, Type = "image"},
        {Image = "http://www.roblox.com/asset/?id=13372803791", ImageColor = Color3.fromRGB(90, 180, 233)})

        wait(30)

        requestfunc({
            Url = "http://127.0.0.1:6463/rpc?v=1",
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json",
                ["Origin"] = "https://discord.com",
            },
            Body = HttpService:JSONEncode({
                cmd = "INVITE_BROWSER",
                args = {
                    code = "ympftAWXJC",
                },
                nonce = HttpService:GenerateGUID(false),
            }),
        })

        queuetpfunc([[
      wait(2)
loadstring(game:HttpGet("https://raw.githubusercontent.com/checkm4te8/Exploit-Scripts/main/HydroHub/Loader.lua", true))()
]])

wait(10)

TeleportService:Teleport(game.PlaceId, LocalPlayer)

end

local isSW = false
local IsKRNL = false
local IsFluxus = false
local IsValyse = false

if getexecutorname and type(getexecutorname) == "function" then
    executorName = getexecutorname() -- string response, use eq statement
    if executorName == "ScriptWare" then
        isSW = true
    elseif executorName == "Fluxus" then
        IsFluxus = true
    elseif executorName == "Valyse" then
    IsValyse = true
     end
end

if Krnl then
    IsKRNL = true
end

if not syn and not isSW and not IsKRNL and not IsFluxus and not IsValyse then
    shared.Notification:Notify(
        {Title = "Experimental support", Description = "You are using an executor that is not natively supported by Hydro, but it might work. Tell us to add support!"},
        {OutlineColor = Color3.fromRGB(255, 239, 74),Time = 5, Type = "image"},
        {Image = "http://www.roblox.com/asset/?id=5107154082", ImageColor = Color3.fromRGB(255, 239, 74)})
end

shared.Notification:Notify(
    {Title = "Initializing", Description = "Creating a secure environment for Hydro and preloading variables..."},
    {OutlineColor = Color3.fromRGB(90, 180, 233),Time = 5, Type = "image"},
    {Image = "http://www.roblox.com/asset/?id=4463059046", ImageColor = Color3.fromRGB(90, 180, 233)})

----- PRELOAD VARIABLES -----

----- SERVICES -----
shared.Players = game:GetService("Players")
shared.TeleportService = game:GetService("TeleportService")
shared.StarterGui = game:GetService("StarterGui")
shared.ReplicatedStorage = game:GetService("ReplicatedStorage")
shared.Lighting = game:GetService("Lighting")
shared.workspace = game:GetService("Workspace")
shared.UserInputService = game:GetService("UserInputService")
shared.HttpService = game:GetService("HttpService")
shared.RunService = game:GetService("RunService")
shared.NetworkClient = game:GetService("NetworkClient")

----- LOADSTRINGS -----
local FluxLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/checkm4te8/UI-Librarys/main/fluxlib.txt", true))()
shared.DendroESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/LordNahida/DendroESP/main/Source.lua"))();

----- OBJECTS -----
local LocalPlayer = shared.Players.LocalPlayer

----- VALUES -----
local PORT = 5000
local InitialSetup = true
local WSURL = nil
local ChatShowUsername = false
local Username = LocalPlayer.Name
local UninitializedSettings = {}
local DisplayName = LocalPlayer.DisplayName
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' -- SW devs fixed their shit but some executors still need it for B64 decoding

----- FUNCTIONS -----
shared.websocketfunc = syn and syn.websocket.connect or IsKRNL and Krnl.WebSocket.connect or IsFluxus and WebSocket.connect or WebSocket and WebSocket
    .connect
    or websocket and websocket.connect

shared.requestfunc = syn and syn.request or isSW and request or IsKRNL and request or IsFluxus and request or request and request

shared.queuetpfunc = syn and syn.queue_on_teleport or isSW and queue_on_teleport or IsKRNL and queue_on_teleport or IsFluxus and queue_on_teleport or queue_on_teleport and queue_on_teleport

function GetFingerprint()
    local Request = shared.requestfunc({ Url = 'https://httpbin.org/get', Method = 'GET' })
    local DecodedBody = shared.HttpService:JSONDecode(Request.Body)
    if syn then
    return DecodedBody.headers["Syn-User-Identifier"]
    elseif isSW then
    return DecodedBody.headers["Sw-User-Identifier"]
	elseif IsKRNL then
	return DecodedBody.headers["Krnl-Fingerprint"]
    elseif IsFluxus then
    return DecodedBody.headers["Flux-Fingerprint"]
    elseif IsValyse then
    return DecodedBody.headers["Valyse-Uid"]
    else
        return LocalPlayer:Kick("[HYDRO] Sorry, your executor is not supported, cannot proceed. Please join our Discord and let us know!")
    end
end

shared.b64decplaceholder = function(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
            return string.char(c)
    end))
end

shared.basedecodefunc = syn and syn.crypt.base64.decode or isSW and crypt.base64decode or IsKRNL and shared.b64decplaceholder or IsFluxus and shared.b64decplaceholder or shared.b64decplaceholder or IsValyse and crypt.base64decode and shared.b64decplaceholder


-----END VARIABLE PRELOADING -----

wait(1.5)

----- EXECUTOR DOES NOT SUPPORT WEBSOCKETS -----
if not shared.websocketfunc then
    shared.Notification:Notify(
        {Title = "Critical compatibility error", Description = "Your executor does not support WebSocket connections, but Hydro requires them. Failure, rejoining..."},
        {OutlineColor = Color3.fromRGB(255, 84, 84),Time = 5, Type = "image"},
        {Image = "http://www.roblox.com/asset/?id=5107154082", ImageColor = Color3.fromRGB(255, 84, 84)})
    wait(5)
    return shared.TeleportService:Teleport(game.PlaceId, LocalPlayer)
else
    ----- END EXECUTOR DOES NOT SUPPORT WEBSOCKETS -----


    ----- CONNECT TO WEBSOCKET -----
    shared.Notification:Notify(
    {Title = "Establishing connection", Description = "Hydro is establishing a connection to the backend via WebSockets, please stand by, this may take a bit..."},
    {OutlineColor = Color3.fromRGB(90, 180, 233),Time = 5, Type = "image"},
    {Image = "http://www.roblox.com/asset/?id=9512524704", ImageColor = Color3.fromRGB(90, 180, 233)})
	
    if shared.debugHost ~= nil then
	WSURL = shared.debugHost
    else
	WSURL = "wss://Hydro-Backend.megamitensei.repl.co/"
    end

    shared.WebSocket = shared.websocketfunc(WSURL .. PORT)

    if shared.WebSocket then
        local kickForWsClose = true
        local initialDisconnectListener = shared.WebSocket.OnClose:Connect(function()
            if kickForWsClose == true then
            return LocalPlayer:Kick("[HYDRO] The websocket connection has been closed before script initialization, likely due to rate limits. Please try again.")
            end
        end)
        
        ----- SEND HELLO MESSAGE TO WEBSOCKET -----
        shared.WebSocket:Send(Username)

        shared.Notification:Notify(
            {Title = "Connection established", Description = "Hydro has connected to the backend successfully! Initializing data..."},
            {OutlineColor = Color3.fromRGB(41, 204, 113),Time = 3, Type = "image"},
            {Image = "http://www.roblox.com/asset/?id=1202200114", ImageColor = Color3.fromRGB(41, 204, 113)})

        ----- END CONNECT TO WEBSOCKET -----

        ----- CHECK IF FIRST TIME AND CREATE FILES/FOLDERS -----
        shared.WhereToReadFrom = nil
        if isfolder("HydroHub") and (isfile("HydroHub/Settings.cfg") or isfile("HydroHub/Cloud.cfg")) then
            if isfile("HydroHub/Settings.cfg") and isfile("HydroHub/Cloud.cfg") then
                delfolder("HydroHub")
                LocalPlayer:Kick(
                    "[HYDRO] A critical error has occured and has been rectified by deleting all your saved data.")
                end
            if isfile("HydroHub/Settings.cfg") then
                shared.WhereToReadFrom = "Local"
            elseif isfile("HydroHub/Cloud.cfg") then
                shared.WhereToReadFrom = "Cloud"
            else
                delfolder("HydroHub")
                LocalPlayer:Kick(
                    "[HYDRO] A critical error has occured and has been rectified by deleting all your saved data.")
            end
            InitialSetup = false
        end

        wait(1)

        local ClearToProceed = false
        local Debounce = false

        if InitialSetup == true then
            if isfolder("HydroHub") then
                delfolder("HydroHub")
            end

            shared.Notification:Notify(
                {Title = "Cloud saving", Description = "First time use has been detected, would you like to store your saved data in the cloud?"},
                {OutlineColor = Color3.fromRGB(90, 180, 233),Time = 9999, Type = "option"},
                {Image = "http://www.roblox.com/asset/?id=4458806382", ImageColor = Color3.fromRGB(90, 180, 233), Callback = function(State)
                if State == true then
                    ----- ENABLE CLOUD SAVING -----
                    if Debounce == false then
                    Debounce = true
                    shared.Notification:Notify(
                        {Title = "Finding saves", Description = "Checking if you already have saved data..."},
                        {OutlineColor = Color3.fromRGB(90, 180, 233),Time = 5, Type = "image"},
                        {Image = "http://www.roblox.com/asset/?id=9512524704", ImageColor = Color3.fromRGB(90, 180, 233)})

            local createNewAccount = nil
            local Fingerprint = GetFingerprint()
            local OnCloudSaveStatusMessage = shared.WebSocket.OnMessage:Connect(function(msg)
                    local funpar, data = msg:match("^([^,]+),(.*)$")
                    if funpar == "CLOUDSAVECHECK" then
                        if data == " true" then
                            createNewAccount = false
                        else
                            createNewAccount = true
                        end
                        OnCloudSaveStatusMessage:Disconnect()
                    end
            end)
            
            shared.WebSocket:Send("GETDATA, CHECKFORCLOUDSAVE, "..Fingerprint)
            
            while (createNewAccount == nil) do
                wait(0.5)
            end

            ----- END CHECK ACCOUNT EXISTANCE -----


            if createNewAccount == true then
                ----- CREATE NEW ACCOUNT -----
                shared.Notification:Notify(
                    {Title = "Creating account", Description = "Creating a new account for you using your executor fingerprint..."},
                    {OutlineColor = Color3.fromRGB(255, 239, 74),Time = 5, Type = "image"},
                    {Image = "http://www.roblox.com/asset/?id=9512524704", ImageColor = Color3.fromRGB(255, 239, 74)})

                local Fingerprint = GetFingerprint()

                local registerComplete = false
                local OnRegisterMessage = shared.WebSocket.OnMessage:Connect(function(msg)
                        local funpar, data = msg:match("^([^,]+),(.*)$")
                        if funpar == "REGISTERCOMPLETE" then
                            registerComplete = true
                            OnRegisterMessage:Disconnect()
                        elseif msg == "BADHWID" then
                            LocalPlayer:Kick("[HYDRO] The websocket server has refused account creation. This is likely due to you using an unsupported executor, we try to support most executors, let us know to add support for yours!")
                        end
                    end)

                shared.WebSocket:Send("SETDATA, REGISTERDATA, " .. Fingerprint)

                while (registerComplete == false) do
                    wait(0.5)
                end

                if isfolder("HydroHub") then
                    delfolder("HydroHub")
                end
                makefolder("HydroHub")
                writefile("HydroHub/Cloud.cfg",
                    "READING FROM CLOUD. TO REVERT, DELETE THE PARENT FOLDER OF THIS FILE.")

                    shared.Notification:Notify(
                        {Title = "Account created", Description = "Your account has been successfully registered! Proceeding..."},
                        {OutlineColor = Color3.fromRGB(41, 204, 113),Time = 3, Type = "image"},
                        {Image = "http://www.roblox.com/asset/?id=1202200114", ImageColor = Color3.fromRGB(41, 204, 113)})

                wait(1)
                shared.WhereToReadFrom = "Cloud"
                ClearToProceed = true;




                ----- END CREATE NEW ACCOUNT -----
            else
                ----- LOGIN TO ACCOUNT -----
                shared.Notification:Notify(
                    {Title = "Logging in", Description = "Logging you in using your executor fingerprint..."},
                    {OutlineColor = Color3.fromRGB(90, 180, 233),Time = 5, Type = "image"},
                    {Image = "http://www.roblox.com/asset/?id=9512524704", ImageColor = Color3.fromRGB(90, 180, 233)})

                local Fingerprint = GetFingerprint()

                local loginComplete = false

                local onLoginMessage = shared.WebSocket.OnMessage:Connect(function(msg)
                        local funpar, data = msg:match("^([^,]+),(.*)$")
                        if funpar == "LOGINCOMPLETE" then
                            loginComplete = true
                            onLoginMessage:Disconnect()
                        elseif msg == "LOGINFAIL" then
                            delfolder("HydroHub")
                            LocalPlayer:Kick("[HYDRO] An error occured when fetching your data, Hydro Hub will try to create new data upon reexecution of the script.")
                            end
                    end)

                shared.WebSocket:Send("GETDATA, LOGINDATA, " .. Fingerprint)

                while (loginComplete == false) do
                    wait(0.5)
                end

                if isfolder("HydroHub") then
                    delfolder("HydroHub")
                end
                makefolder("HydroHub")
                writefile("HydroHub/Cloud.cfg",
                    "READING FROM CLOUD. TO REVERT, DELETE THE PARENT FOLDER OF THIS FILE.")

                wait(1)

                ClearToProceed = true
                shared.WhereToReadFrom = "Cloud"

                ----- END LOGIN TO ACCOUNT -----
            end
        end
        else
        ----- ENABLE LOCAL SAVING -----
        if Debounce == false then
            Debounce = true

            shared.Notification:Notify(
    {Title = "Fetching template", Description = "Fetching the current settings template..."},
    {OutlineColor = Color3.fromRGB(90, 180, 233),Time = 2.5, Type = "image"},
    {Image = "http://www.roblox.com/asset/?id=4463059046", ImageColor = Color3.fromRGB(90, 180, 233)})

    local processedTemplate = nil
    local undecodedTemplate = nil
    local OnTemplateMessage = shared.WebSocket.OnMessage:Connect(function(msg)
            local funpar, data = msg:match("^([^,]+),(.*)$")
            if funpar == "SETTINGSTEMPLATE" then
                local jsondecoded = shared.HttpService:JSONDecode(data)
                processedTemplate = jsondecoded
                undecodedTemplate = data
                OnTemplateMessage:Disconnect()
            end
        end)

    shared.WebSocket:Send("GETDATA, GETLOCALTEMPLATE")
    
    
    while (processedTemplate == nil) do
        wait(0.5)
    end

    shared.Notification:Notify(
    {Title = "Writing settings", Description = "Writing settings, do not turn off power..."},
    {OutlineColor = Color3.fromRGB(255, 239, 74),Time = 2.5, Type = "image"},
    {Image = "http://www.roblox.com/asset/?id=4463059046", ImageColor = Color3.fromRGB(255, 239, 74)})

    makefolder("HydroHub")
    writefile("HydroHub/Settings.cfg", undecodedTemplate)

    shared.WhereToReadFrom = "Local"
    ClearToProceed = true
            -----END ENABLE LOCAL SAVING -----

            while ClearToProceed == false do
                wait(1)
            end
            ----- END SAVING PROMPT -----
        end
        end
    end})
end

while shared.WhereToReadFrom ~= "Local" and shared.WhereToReadFrom ~= "Cloud" do
    wait(1)
end

        ----- FIRST TIME CONFIGURATION DONE, BELOW = STANDARD LOADER -----

        
        shared.Notification:Notify(
            {Title = "Reading settings", Description = "Reading your saved settings..."},
            {OutlineColor = Color3.fromRGB(90, 180, 233),Time = 2.5, Type = "image"},
            {Image = "http://www.roblox.com/asset/?id=4463059046", ImageColor = Color3.fromRGB(90, 180, 233)})

        shared.Settings = nil

        if shared.WhereToReadFrom == "Local" then
            shared.Settings = shared.HttpService:JSONDecode(readfile("HydroHub/Settings.cfg"))
        elseif shared.WhereToReadFrom == "Cloud" then
            local Fingerprint = GetFingerprint()
            local loginComplete = false

            local onLoginMessage = shared.WebSocket.OnMessage:Connect(function(msg)
                    local funpar, data = msg:match("^([^,]+),(.*)$")
                    if funpar == "LOGINCOMPLETE" then
                        local jsondecoded = shared.HttpService:JSONDecode(data)
                        shared.Settings = jsondecoded
                        loginComplete = true
                        onLoginMessage:Disconnect()
                            elseif msg == "LOGINFAIL" then
                                        delfolder("HydroHub")
                                        LocalPlayer:Kick("[HYDRO] The websocket server has reported your data does not exist. Please reexecute Hydro, it will try to create new data.")
                              
                    end
                end)

            shared.WebSocket:Send("GETDATA, LOGINDATA, " .. Fingerprint)

            while (loginComplete == false) do
                wait(0.5)
            end
        end
        wait(1)
        shared.Notification:Notify(
            {Title = "All set!", Description = "Components are ready! Initializing interface..."},
            {OutlineColor = Color3.fromRGB(41, 204, 113),Time = 3, Type = "image"},
            {Image = "http://www.roblox.com/asset/?id=1202200114", ImageColor = Color3.fromRGB(41, 204, 113)})

        ----- INTIALIZE UI -----
        local ColorR = shared.Settings.ColorR
        local ColorG = shared.Settings.ColorG
        local ColorB = shared.Settings.ColorB
        shared.CompleteColor = Color3.fromRGB(tonumber(ColorR), tonumber(ColorG), tonumber(ColorB))

        shared.Mainframe = FluxLib:Window("Hydro", "Welcome, " .. DisplayName .. "!",
                Color3.fromRGB(tonumber(ColorR), tonumber(ColorG), tonumber(ColorB)), Enum.KeyCode.End)

        -----GET UNIVERSAL SCRIPT -----

        local scriptEncoded = nil
        kickForWsClose = false
        local OnReceivedEncodedScript = shared.WebSocket.OnMessage:Connect(function(msg)
                local funpar, data = msg:match("^([^,]+),(.*)$")
                if funpar == "UNIVERSALSCRIPT" then
                    scriptEncoded = data
                    OnReceivedEncodedScript:Disconnect()
                end
            end)

        shared.WebSocket:Send("GETDATA, GETUNIVERSALSCRIPT")


        while (scriptEncoded == nil) do
            wait(0.5)
        end
                
        local decodedUniversal = shared.basedecodefunc(scriptEncoded)


        loadstring(decodedUniversal)()
        
    end
end
